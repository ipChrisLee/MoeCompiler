#pragma once

#include <unordered_map>

#include "pass/pass-common.hpp"
#include "IR/IRInstr.hpp"


namespace pass {

/**
 * @brief Clear Continuous Jump Labels.
 * @example <tt>INSTRS;label_2:</tt> -> <tt>INSTRS;br label_2;label_2:</tt> (INSTRS not end with br or ret)
 */
class AddBrToNextBB : public IRPass {
  protected:
	int run(std::list<ircode::IRInstr *> & instrs);

  public:
	int run() override;

	explicit AddBrToNextBB(ircode::IRModule & ir, std::string name = "");
};

/**
 * @brief Handle @c br comes with @c br
 * @note Every @c br generated by frontend and preprocess pass is two-way conditional jump or
 * 		one-way direct jump. So @c br comes with @c br can be eliminated.
 * @Example INSTRS;br label_1;br ...; => INSTRS;br label_1;
 * @Example INSTRS;br cond label_1,label_2;br ...; => INSTRS;br label_1,label_2;
 */
class EliminateBrAfterBr : public IRPass {
  protected:
	int run(std::list<ircode::IRInstr *> & instrs);
  public:
	EliminateBrAfterBr(ircode::IRModule & ir, const std::string & name = "");
	int run() override;
};


}